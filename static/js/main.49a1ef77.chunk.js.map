{"version":3,"sources":["images/give-them-a-moment.gif","images/is-it-secret-is-it-safe.gif","images/alright-then-keep-your-secrets.gif","images/not-idly.gif","images/one-does-not-simply-walk-into-mordor.webp","images/part-of-this-world.gif","images/po-tay-toes.webp","images/salted-pork.webp","images/to-isengard.gif","images/what-about-second-breakfast.gif","images/what-are-we-waiting-for.gif","images/what-is-this-new-devilry.gif","images/you-cannot-wield-it.gif","images/you-shall-not-pass.webp","Question.js","QuizScore.js","base-quotes.js","QuizArea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","THE_FELLOWSHIP","FellowshipSelect","props","react_default","a","createElement","Object","assign","className","value","defaultValue","disabled","hidden","map","companion","key","Question","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","speaker","answer","onAnswer","newState","setState","onAnswerHook","speakerIsCorrect","setSpeaker","event","target","quote","quoteImage","alt","text","src","image","yourAnswer","resultText","questionClassnames","classNames","Question-answered","answered","Question-unanswered","Question_FellowshipSelect","onChange","onClick","Component","QuizScore","scoreQualityClass","ratio","correct","base_quotes","isItSecret","keepYourSecrets","whatAboutSecondBreakfast","oneDoesNotSimply","poTayToes","youShallNotPass","giveThemAMoment","whatIsThisNewDevilry","toIsengard","saltedPork","whatAreWeWaitingFor","notIdly","youCannotWieldIt","partOfThisWorld","QuizNavigation","isCurrentQuestionAnswered","onClickNext","QuizArea","quoteIndex","answeredCorrectly","gotoNextQuestion","quotes","length","src_QuizScore_0","src_Question_0","QuizArea_QuizNavigation","App","aria-label","role","src_QuizArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49a1ef77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/give-them-a-moment.fba243ae.gif\";","module.exports = __webpack_public_path__ + \"static/media/is-it-secret-is-it-safe.05dba5a4.gif\";","module.exports = __webpack_public_path__ + \"static/media/alright-then-keep-your-secrets.9104ea48.gif\";","module.exports = __webpack_public_path__ + \"static/media/not-idly.e80bf7a2.gif\";","module.exports = __webpack_public_path__ + \"static/media/one-does-not-simply-walk-into-mordor.e887f2d8.webp\";","module.exports = __webpack_public_path__ + \"static/media/part-of-this-world.abe829cb.gif\";","module.exports = __webpack_public_path__ + \"static/media/po-tay-toes.bb275afe.webp\";","module.exports = __webpack_public_path__ + \"static/media/salted-pork.f1c12ee4.webp\";","module.exports = __webpack_public_path__ + \"static/media/to-isengard.a7868a60.gif\";","module.exports = __webpack_public_path__ + \"static/media/what-about-second-breakfast.2e86c3f1.gif\";","module.exports = __webpack_public_path__ + \"static/media/what-are-we-waiting-for.6139582c.gif\";","module.exports = __webpack_public_path__ + \"static/media/what-is-this-new-devilry.4f510c2c.gif\";","module.exports = __webpack_public_path__ + \"static/media/you-cannot-wield-it.4ad0bbee.gif\";","module.exports = __webpack_public_path__ + \"static/media/you-shall-not-pass.4f11dcb2.webp\";","import React, { Component } from 'react';\n\nimport classNames from 'classnames';\n\nimport './Question.css';\n\nconst THE_FELLOWSHIP = [\n  'Aragorn',\n  'Boromir',\n  'Frodo',\n  'Gandalf',\n  'Gimli',\n  'Merry',\n  'Legolas',\n  'Pippin',\n  'Sam'\n];\n\n/* A select including the nine members of the fellowship of the ring\n\nprops are passed through to the select component.\n*/\nconst FellowshipSelect = props => {\n  return (\n    <select className=\"FellowshipSelect\" {...props}>\n      <option value={FellowshipSelect.defaultValue} disabled hidden>\n        Select a companion\n      </option>\n      {THE_FELLOWSHIP.map(companion => (\n        <option key={companion} value={companion}>\n          {companion}\n        </option>\n      ))}\n    </select>\n  );\n};\nFellowshipSelect.defaultValue = '';\n\n/* Quote display, answer selection, and answer display\n\nThere's a lot happening here. One surprising fact is that the caller must\nspecify whether the question displays as answered or not. It's not ideal,\nbut it allows resetting the question from above.\n*/\nclass Question extends Component {\n  state = {\n    speaker: FellowshipSelect.defaultValue,\n    answer: null\n  };\n\n  constructor(props) {\n    super(props);\n    this.onAnswerHook = props.onAnswer;\n  }\n\n  speakerIsCorrect() {\n    return this.state.answer === this.props.quote.speaker;\n  }\n\n  onAnswer = () => {\n    const newState = {\n      answer: this.state.speaker,\n      speaker: FellowshipSelect.defaultValue\n    };\n    this.setState(\n      newState,\n      // Make sure to call the callback after state has changed\n      () => this.onAnswerHook(this.speakerIsCorrect())\n    );\n  };\n\n  setSpeaker = event => {\n    this.setState({ speaker: event.target.value });\n  };\n\n  render() {\n    const quote = this.props.quote;\n\n    const quoteImage = (\n      <img alt={quote.text} className=\"Quote-image\" src={quote.image} />\n    );\n    const speaker = <div className=\"Quote-speaker\">{quote.speaker}</div>;\n    const yourAnswer = (\n      <div className=\"Question-yourAnswer\">\n        Your Answer: {this.state.answer}\n      </div>\n    );\n\n    const resultText = (\n      <div className=\"Question-result\">\n        {this.speakerIsCorrect() ? 'Correct' : 'Incorrect'}\n      </div>\n    );\n\n    // Handy for conditionally rendering things whethere the question inspect\n    // answered or unanswered\n    const questionClassnames = classNames('Question', {\n      'Question-answered': this.props.answered,\n      'Question-unanswered': !this.props.answered\n    });\n\n    return (\n      <div className={questionClassnames}>\n        {quoteImage}\n        <div className=\"Quote-text\">{quote.text}</div>\n        {speaker}\n        {yourAnswer}\n        {resultText}\n        <FellowshipSelect\n          disabled={this.props.answered}\n          onChange={this.setSpeaker}\n          value={this.state.speaker}\n        />\n        <button\n          className=\"Question-submit\"\n          disabled={this.props.answered}\n          onClick={this.onAnswer}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React from 'react';\n\nimport classNames from 'classnames';\n\nimport './QuizScore.css';\n\nconst QuizScore = props => {\n  var scoreQualityClass;\n  // Default to good if there haven't been any answers yet\n  if (props.answered === 0) {\n    scoreQualityClass = 'QuizScore-good';\n  } else {\n    const ratio = props.correct / props.answered;\n\n    if (ratio < 0.33) {\n      scoreQualityClass = 'QuizScore-bad';\n    } else if (ratio < 0.75) {\n      scoreQualityClass = 'QuizScore-medium';\n    } else {\n      scoreQualityClass = 'QuizScore-good';\n    }\n  }\n  return (\n    <div className={classNames('QuizScore', scoreQualityClass)}>\n      {props.correct}/{props.answered}\n    </div>\n  );\n};\n\nexport default QuizScore;\n","import giveThemAMoment from './images/give-them-a-moment.gif';\nimport isItSecret from './images/is-it-secret-is-it-safe.gif';\nimport keepYourSecrets from './images/alright-then-keep-your-secrets.gif';\nimport notIdly from './images/not-idly.gif';\nimport oneDoesNotSimply from './images/one-does-not-simply-walk-into-mordor.webp';\nimport partOfThisWorld from './images/part-of-this-world.gif';\nimport poTayToes from './images/po-tay-toes.webp';\nimport saltedPork from './images/salted-pork.webp';\nimport toIsengard from './images/to-isengard.gif';\nimport whatAboutSecondBreakfast from './images/what-about-second-breakfast.gif';\nimport whatAreWeWaitingFor from './images/what-are-we-waiting-for.gif';\nimport whatIsThisNewDevilry from './images/what-is-this-new-devilry.gif';\nimport youCannotWieldIt from './images/you-cannot-wield-it.gif';\nimport youShallNotPass from './images/you-shall-not-pass.webp';\n\nexport default [\n  {\n    text: 'Is it secret? Is it safe!?',\n    speaker: 'Gandalf',\n    image: isItSecret\n  },\n  {\n    text: 'All right then...keep your secrets.',\n    speaker: 'Frodo',\n    image: keepYourSecrets\n  },\n  {\n    text: 'We’ve had one, yes. What about second breakfast?',\n    speaker: 'Pippin',\n    image: whatAboutSecondBreakfast\n  },\n  {\n    text: 'One does not simply walk into Mordor.',\n    speaker: 'Boromir',\n    image: oneDoesNotSimply\n  },\n  {\n    text: 'Po-ta-toes! Boil them, mash them, stick them in a stew.',\n    speaker: 'Sam',\n    image: poTayToes\n  },\n  {\n    text: 'You shall not pass!',\n    speaker: 'Gandalf',\n    image: youShallNotPass\n  },\n  {\n    text: \"Give them a moment, for pity's sake!\",\n    speaker: 'Boromir',\n    image: giveThemAMoment\n  },\n  {\n    text: 'What is this new devilry?',\n    speaker: 'Boromir',\n    image: whatIsThisNewDevilry\n  },\n  {\n    text: \"They're taking the hobbits to Isengard!\",\n    speaker: 'Legolas',\n    image: toIsengard\n  },\n  {\n    text: 'The salted pork is particularly good.',\n    speaker: 'Pippin',\n    image: saltedPork\n  },\n  {\n    text:\n      'Certainty of death. Small chance of success. What are we waiting for?',\n    speaker: 'Gimli',\n    image: whatAreWeWaitingFor\n  },\n  {\n    text: 'Not idly do the leaves of Lórien fall.',\n    speaker: 'Aragorn',\n    image: notIdly\n  },\n  {\n    text: 'You cannot wield it! None of us can.',\n    speaker: 'Aragorn',\n    image: youCannotWieldIt\n  },\n  {\n    text: \"But you're part of this world, aren't you?\",\n    speaker: 'Merry',\n    image: partOfThisWorld\n  }\n];\n","/* The quiz card and navigation */\nimport React, { Component } from 'react';\n\nimport Question from './Question.js';\nimport QuizScore from './QuizScore.js';\n\nimport quotes from './base-quotes.js';\n\nconst QuizNavigation = props => {\n  if (!props.isCurrentQuestionAnswered) {\n    return false;\n  }\n\n  return (\n    <div className=\"QuizNavigation\">\n      <button onClick={props.onClickNext}>Next</button>\n    </div>\n  );\n};\n\nclass QuizArea extends Component {\n  state = {\n    answered: 0,\n    correct: 0,\n    isCurrentQuestionAnswered: false,\n    quoteIndex: 0\n  };\n\n  onAnswer = answeredCorrectly => {\n    this.setState((state, props) => ({\n      answered: state.answered + 1,\n      correct: answeredCorrectly ? state.correct + 1 : state.correct,\n      isCurrentQuestionAnswered: true\n    }));\n  };\n\n  gotoNextQuestion = () => {\n    this.setState((state, props) => {\n      return {\n        quoteIndex: this.state.quoteIndex + 1,\n        isCurrentQuestionAnswered: false\n      };\n    });\n  };\n\n  render() {\n    const quote = quotes[this.state.quoteIndex];\n\n    const done = this.state.answered === quotes.length;\n\n    if (done) {\n      return (\n        <div className=\"QuizArea\">\n          <QuizScore\n            correct={this.state.correct}\n            answered={this.state.answered}\n          />\n          Congratulations! You're done.\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"QuizArea\">\n        <QuizScore\n          correct={this.state.correct}\n          answered={this.state.answered}\n        />\n        <Question\n          answered={this.state.isCurrentQuestionAnswered}\n          quote={quote}\n          onAnswer={this.onAnswer}\n        />\n        <QuizNavigation\n          isCurrentQuestionAnswered={this.state.isCurrentQuestionAnswered}\n          onClickNext={this.gotoNextQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default QuizArea;\n","import React, { Component } from 'react';\n\nimport QuizArea from './QuizArea';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          Know Your Nine{' '}\n          <span aria-label=\"A ring and a sword.\" role=\"img\">\n            💍🗡\n          </span>\n        </h1>\n        <main>\n          <p>A Lord of the Rings™ quiz</p>\n          <QuizArea />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}